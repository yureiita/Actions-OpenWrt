#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt Mi 4A Gigabit

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      repo-branch:
        description: 'Repo branch'
        required: true
        default: 'openwrt-23.05'
      repo-url:
        description: 'Repo url'
        required: false
        default: 'https://github.com/openwrt/openwrt'
      clean-cache:
        description: 'Clean cache'
        required: false
        default: 'false'

env:
  REPO_URL: ${{ github.event.inputs.repo-url || 'https://github.com/openwrt/openwrt' }}.git
  REPO_BRANCH: ${{ github.event.inputs.repo-branch }}
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: m4a${{ contains(fromJSON('["main", "master"]'), github.event.inputs.repo-branch) && '-snapshot' || '' }}.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  RELEASE_DEVICE: Xiaomi Mi 4a Gigabit ${{ contains(fromJSON('["main", "master"]'), github.event.inputs.repo-branch) && 'SNAPSHOT' || startsWith(github.event.inputs.repo-branch, 'openwrt-') && format('{0}-SNAPSHOT', github.event.inputs.repo-branch) || github.event.inputs.repo-branch }} from ${{ github.event.inputs.repo-url || 'https://github.com/openwrt/openwrt' }}/tree/${{ github.event.inputs.repo-branch }}.
  RELEASE_PACKAGE: "Packages included: luci-ssl, wpad-mbedtls, https-dns-proxy, irqbalance, nlbwmon, sqm, statistics, curl, nano, usteer."
  TZ: Asia/Brunei

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Check Server Performance
      run: |
        echo "Warningâš "
        echo "The assigned server has limited performance. If you select too many plug-ins, be sure to pay attention to the CPU performance!"
        echo -e "Known CPU models (in descending order): 7763, 8370C, 8272CL, 8171M, E5-2673\n"
        echo "--------------------------CPU information--------------------------"
        echo "Physical number of CPUs: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU core information: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------Memory information--------------------------"
        echo "Details of installed memory:"
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------Hard disk information--------------------------"
        echo "Number of hard disks: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo -E apt-get -qq update
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* hhvm firefox google* microsoft-edge-stable dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
        sudo -E apt-get -qq install $(curl -fsSL https://is.gd/ubuntu_2204_depends)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir

    - name: Clone source code
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Create cache key
      run: |
        cd openwrt
        echo "CACHE_KEY=cache-openwrt-$(git log --pretty=tformat:"%h" -n1 -- tools toolchain)" >> $GITHUB_ENV

    - name: Restore cache
      uses: actions/cache/restore@v4
      id: restore-cache
      if: github.event.inputs.clean-cache == 'false' && !cancelled()
      with:
        path: |
          ${{ github.workspace }}/openwrt/staging_dir/host*
          ${{ github.workspace }}/openwrt/staging_dir/tool*
          ${{ github.workspace }}/openwrt/.ccache
        key: ${{ env.CACHE_KEY }}
        restore-keys: |
          cache-openwrt-

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        if [[ $REPO_BRANCH =~ ^"v" ]]; then
          sed -i "s/SNAPSHOT/$(echo ${REPO_BRANCH/"v"})/" openwrt/.config
          sed -i '/CONFIG_VERSION_CODE_FILENAMES=y/d' openwrt/.config
        elif [[ $REPO_BRANCH =~ ^"openwrt-" ]]; then
          sed -i "s/\(SNAPSHOT\)/$(echo ${REPO_BRANCH/"openwrt-"})-\1/" openwrt/.config
        fi
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        set -o pipefail
        { make -j$(($(nproc)+1)) | tee build.log ; } || { make -j1 V=s CONFIG_DEBUG_SECTION_MISMATCH=y 2>&1 | tee verbose.log | grep -i -E "^make.*(error|[12345]...Entering dir)" ; }
        set +o pipefail
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    # overwrite cache key: delete previous and save current
    - name: Delete Previous Cache
      if: always() && steps.restore-cache.outputs.cache-hit
      continue-on-error: true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh extension install actions/gh-actions-cache
        gh actions-cache delete "${{ steps.restore-cache.outputs.cache-matched-key }}" --confirm

    - name: Save cache
      uses: actions/cache/save@v4
      if: always()
      with:
        path: |
          ${{ github.workspace }}/openwrt/staging_dir/host*
          ${{ github.workspace }}/openwrt/staging_dir/tool*
          ${{ github.workspace }}/openwrt/.ccache
        key: ${{ env.CACHE_KEY }}

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Upload logs
      uses: actions/upload-artifact@main
      if: (!cancelled())
      with:
        name: OpenWrt_log${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: |
            openwrt/logs
            openwrt*/*.log

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo $RELEASE_DEVICE$'\n\n'$RELEASE_PACKAGE >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3
        delete_workflow_pattern: ${{ github.workflow }}

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.3
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 10
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}